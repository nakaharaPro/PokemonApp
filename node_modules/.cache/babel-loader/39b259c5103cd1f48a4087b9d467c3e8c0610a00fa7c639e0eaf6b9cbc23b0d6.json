{"ast":null,"code":"var _jsxFileName = \"/Users/nakaharakenta/Desktop/React/reactProject/pokemon-app/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport { getAllPokemon, getPokemon } from \"./utils/pokemon\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const initialURL = \"https://pokeapi.co/api/v2/pokemon\";\n  const [loading, setLoading] = useState(true);\n  const [pokemonData, setpokemonData] = useState([]);\n\n  //APIを叩くとはデータを取ってくること\n  useEffect(() => {\n    const fetchPokemonData = async () => {\n      //非同期処理（個別で処理）のためasync関数を用いる\n      //全てのポケモンデータを取得\n      let res = await getAllPokemon(initialURL); //awaitはgetAllPokemonの処理が完了するまでlesに格納しない\n      //各ポケモンの詳細を取得\n      loadPokemon(res.results);\n\n      // console.log(res);\n      setLoading(false); //データを取得できたらローディングはありません\n    };\n\n    fetchPokemonData();\n  }, []); //ブラウザロード時にポケモンのデータを読み込む、ロード時のみのためから配列指定\n\n  const loadPokemon = async data => {\n    //asyncとawaitで取得中のpromiseのコンソールを無くす\n    let _PokemonData = await Promise.all(\n    //20個のfetchが終わるまでという意味の all\n    data.map(pokemon => {\n      // console.log(pokemon);\n      let pokemonRecode = getPokemon(pokemon.url);\n      return pokemonRecode;\n    }));\n    setpokemonData(_PokemonData); //レンダリングによりpokemonDataに格納される\n  };\n\n  console.log(pokemonData);\n\n  //?はfalseの時 :はtrueの時\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: loading ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u30ED\\u30FC\\u30C9\\u4E2D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pokemonCardContainer\",\n        children: pokemonData.map((pokemon, i) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"pokemon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 18\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }, this)\n    }, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 10\n  }, this);\n}\n_s(App, \"AfNwA+kdWvfhWvc+AHsDk/55yi0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","getAllPokemon","getPokemon","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","initialURL","loading","setLoading","pokemonData","setpokemonData","fetchPokemonData","res","loadPokemon","results","data","_PokemonData","Promise","all","map","pokemon","pokemonRecode","url","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","i","_c","$RefreshReg$"],"sources":["/Users/nakaharakenta/Desktop/React/reactProject/pokemon-app/src/App.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport './App.css';\nimport {getAllPokemon,getPokemon} from \"./utils/pokemon\";\n\nfunction App() {\n  const initialURL = \"https://pokeapi.co/api/v2/pokemon\"\n  const [loading,setLoading] = useState(true);\n  const [pokemonData,setpokemonData] = useState([])\n\n\n//APIを叩くとはデータを取ってくること\n  useEffect (()=>{\n    const fetchPokemonData= async()=>{//非同期処理（個別で処理）のためasync関数を用いる\n      //全てのポケモンデータを取得\n      let res= await getAllPokemon(initialURL);//awaitはgetAllPokemonの処理が完了するまでlesに格納しない\n      //各ポケモンの詳細を取得\n      loadPokemon(res.results);\n      \n      // console.log(res);\n      setLoading(false);//データを取得できたらローディングはありません\n    };\n    fetchPokemonData();\n  },[]);//ブラウザロード時にポケモンのデータを読み込む、ロード時のみのためから配列指定\n\n\n  const loadPokemon= async (data)=>{//asyncとawaitで取得中のpromiseのコンソールを無くす\n    let _PokemonData = await Promise.all(//20個のfetchが終わるまでという意味の all\n    data.map((pokemon)=>{\n      // console.log(pokemon);\n      let pokemonRecode = getPokemon(pokemon.url);\n      return pokemonRecode;\n    })\n    );\n    setpokemonData(_PokemonData)//レンダリングによりpokemonDataに格納される\n  };\n  console.log(pokemonData);\n\n  //?はfalseの時 :はtrueの時\n  return <div className=\"App\">\n    {loading ? (\n      <h1>ロード中</h1>\n    ) : (\n      <>\n      <div className=\"pokemonCardContainer\">\n        {pokemonData.map((pokemon,i)=>{\n          return <div>pokemon</div>\n        })}\n      </div>\n    </>\n    )}\n\n  </div>;\n\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAO,WAAW;AAClB,SAAQC,aAAa,EAACC,UAAU,QAAO,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEzD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAMC,UAAU,GAAG,mCAAmC;EACtD,MAAM,CAACC,OAAO,EAACC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC3C,MAAM,CAACY,WAAW,EAACC,cAAc,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;;EAGnD;EACED,SAAS,CAAE,MAAI;IACb,MAAMe,gBAAgB,GAAE,MAAAA,CAAA,KAAS;MAAC;MAChC;MACA,IAAIC,GAAG,GAAE,MAAMd,aAAa,CAACQ,UAAU,CAAC,CAAC;MACzC;MACAO,WAAW,CAACD,GAAG,CAACE,OAAO,CAAC;;MAExB;MACAN,UAAU,CAAC,KAAK,CAAC,CAAC;IACpB,CAAC;;IACDG,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAC,EAAE,CAAC,CAAC;;EAGN,MAAME,WAAW,GAAE,MAAOE,IAAI,IAAG;IAAC;IAChC,IAAIC,YAAY,GAAG,MAAMC,OAAO,CAACC,GAAG;IAAC;IACrCH,IAAI,CAACI,GAAG,CAAEC,OAAO,IAAG;MAClB;MACA,IAAIC,aAAa,GAAGtB,UAAU,CAACqB,OAAO,CAACE,GAAG,CAAC;MAC3C,OAAOD,aAAa;IACtB,CAAC,CACD,CAAC;IACDX,cAAc,CAACM,YAAY,CAAC;EAC9B,CAAC;;EACDO,OAAO,CAACC,GAAG,CAACf,WAAW,CAAC;;EAExB;EACA,oBAAOR,OAAA;IAAKwB,SAAS,EAAC,KAAK;IAAAC,QAAA,EACxBnB,OAAO,gBACNN,OAAA;MAAAyB,QAAA,EAAI;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,gBAEb7B,OAAA,CAAAE,SAAA;MAAAuB,QAAA,eACAzB,OAAA;QAAKwB,SAAS,EAAC,sBAAsB;QAAAC,QAAA,EAClCjB,WAAW,CAACU,GAAG,CAAC,CAACC,OAAO,EAACW,CAAC,KAAG;UAC5B,oBAAO9B,OAAA;YAAAyB,QAAA,EAAK;UAAO;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC;QAC3B,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC;IAAC,gBACN;EACD;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEE,CAAC;AAER;AAACzB,EAAA,CAjDQD,GAAG;AAAA4B,EAAA,GAAH5B,GAAG;AAmDZ,eAAeA,GAAG;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}